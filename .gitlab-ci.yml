image: docker:stable

stages:
- build frontend
- build
- manifest

default:
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build frontend:
  image: node:lts-alpine
  before_script: []
  stage: build frontend
  variables:
    NODE_ENV: "production"
  cache:
    paths:
    - frontend/node_modules
    - frontend/web_modules
  script:
  - cd frontend
  - yarn
  - yarn snowpack
  - mkdir ../frontend_build
  - cp -a index.js index.html lib res views web_modules ../frontend_build/
  artifacts:
    paths:
    - frontend_build
    expire_in: 1 hour

build amd64:
  stage: build
  tags:
  - amd64
  script:
  - echo frontend >> .dockerignore
  - docker pull $CI_REGISTRY_IMAGE:latest || true
  - docker build --pull --cache-from=$CI_REGISTRY_IMAGE:latest --build-arg TARGETARCH=amd64 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64 . -f Dockerfile.ci
  - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64
  - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64

build arm64:
  stage: build
  tags:
  - arm64
  script:
  - echo frontend >> .dockerignore
  - docker pull $CI_REGISTRY_IMAGE:latest || true
  - docker build --pull --cache-from=$CI_REGISTRY_IMAGE:latest --build-arg TARGETARCH=amd64 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-arm64 . -f Dockerfile.ci
  - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-arm64
  - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-arm64

manifest:
  stage: manifest
  before_script:
  - "mkdir -p $HOME/.docker && echo '{\"experimental\": \"enabled\"}' > $HOME/.docker/config.json"
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
  - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64
  - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-arm64
  - if [ $CI_COMMIT_BRANCH == "master" ]; then docker manifest create $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64 $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-arm64 && docker manifest push $CI_REGISTRY_IMAGE:latest; fi
  - if [ $CI_COMMIT_BRANCH != "master" ]; then docker manifest create $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64 $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-arm64 && docker manifest push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME; fi
  - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64 $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-arm64
